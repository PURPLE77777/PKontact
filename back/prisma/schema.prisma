// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique @db.VarChar(64)
  email     String   @unique
  password  String
  profile   Profile?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

enum Role {
  ADMIN
  USER
}

model Profile {
  conversations         ConversationsOnProfiles[]
  role                  Role                      @default(USER)
  user                  User                      @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId                String                    @unique @map("user_id")
  conversationModerator ConversationsModerators[]
  message               Message?                  @relation(references: [id], fields: [messageId], onDelete: Cascade)
  messageId             String?                   @unique @map("message_id")
  conversation          Conversation?             @relation(references: [id], fields: [conversationId], onDelete: Cascade)
  conversationId        String?                   @unique @map("conversation_id")
  seenMessages          SeenMessagesOnProfiles[]

  @@id([userId])
}

model Conversation {
  id                     String                    @id @default(cuid())
  name                   String
  image                  String?
  isGroup                Boolean                   @default(false)
  createdAt              DateTime                  @default(now()) @map("created_at")
  updatedAt              DateTime                  @default(now()) @updatedAt @map("updated_at")
  conversationModerators ConversationsModerators[]
  profiles               ConversationsOnProfiles[]
  messages               Message[]
  creator                Profile?
}

model ConversationsOnProfiles {
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(references: [id], fields: [conversationId], onDelete: Cascade)
  conversationId String       @map("conversation_id")
  profile        Profile      @relation(references: [userId], fields: [profileId])
  profileId      String       @map("profile_id")

  @@id([profileId, conversationId])
}

model ConversationsModerators {
  profile        Profile      @relation(references: [userId], fields: [profileId], onDelete: Cascade)
  profileId      String       @map("profile_id")
  conversation   Conversation @relation(references: [id], fields: [conversationId], onDelete: Cascade)
  conversationId String       @map("conversation_id")

  @@id([profileId, conversationId])
}

model Message {
  id               String                   @id @default(cuid())
  text             String
  image            String?
  answeredMessages AnsweredMessages[]
  createdAt        DateTime                 @default(now()) @map("created_at")
  updatedAt        DateTime                 @default(now()) @updatedAt @map("updated_at")
  seenUsers        SeenMessagesOnProfiles[]
  owner            Profile?
  conversation     Conversation             @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String                   @map("conversation_id")
}

model AnsweredMessages {
  message  Message @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId String  @map("answer_id")

  @@id([answerId])
}

model SeenMessagesOnProfiles {
  profile   Profile @relation(references: [userId], fields: [profileId], onDelete: Cascade)
  profileId String  @map("profile_id")
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String  @map("message_id")

  @@id([messageId, profileId])
}
